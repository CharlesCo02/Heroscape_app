}
return(vec)
})
}
shinyApp(ui = ui, server = server)
prob_att <- 3/6
prob_def <- 2/6
options( "digits"=7, "scipen"=0)
Dommage <- function(n_att, de_att, de_def, vie_def){
hit_max <- vie_def
prob_dom_tot <- numeric(hit_max + 1)
prob_dom <- numeric(hit_max + 1)
for(def in 0:de_def){
for(att in 0:de_att){
hit <- pmax(pmin(att - def, hit_max), 0)
prob_dom[hit + 1] <- prob_dom[hit + 1] + dbinom(att, de_att, prob_att) * dbinom(def, de_def, prob_def)
}
}
if(n_att == 1){
for(i in 1:length(prob_dom)){
prob_dom_tot[i] <- prob_dom[i]
}
}
if(n_att == 2){
for(i in 0:hit_max){
for(j in 0:hit_max){
prob_dom_tot[pmin(i + j + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1]
}
}
}
if(n_att == 3){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1]
}
}
}
}
if(n_att == 4){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
for(z in 0:hit_max){
prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1] * prob_dom[z + 1]
}
}
}
}
}
return(prob_dom_tot)
}
Dommage(4, 5, 3, 4)
Dommage(4, 5, 3, 4)
prob_att <- 3/6
prob_def <- 2/6
options( "digits"=7, "scipen"=0)
Dommage <- function(n_att, de_att, de_def, vie_def){
hit_max <- vie_def
prob_dom_tot <- numeric(hit_max + 1)
prob_dom <- numeric(hit_max + 1)
for(def in 0:de_def){
for(att in 0:de_att){
hit <- pmax(pmin(att - def, hit_max), 0)
prob_dom[hit + 1] <- prob_dom[hit + 1] + dbinom(att, de_att, prob_att) * dbinom(def, de_def, prob_def)
}
}
if(n_att == 1){
for(i in 1:length(prob_dom)){
prob_dom_tot[i] <- prob_dom[i]
}
}
if(n_att == 2){
for(i in 0:hit_max){
for(j in 0:hit_max){
prob_dom_tot[pmin(i + j + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1]
}
}
}
if(n_att == 3){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1]
}
}
}
}
if(n_att == 4){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
for(z in 0:hit_max){
prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1] * prob_dom[z + 1]
}
}
}
}
}
return(prob_dom_tot)
}
Dommage(4, 5, 3, 4)
prob_att <- 3/6
prob_def <- 2/6
Dommage <- function(n_att, de_att, de_def, vie_def){
hit_max <- vie_def
prob_dom_tot <- numeric(hit_max + 1)
prob_dom <- numeric(hit_max + 1)
for(def in 0:de_def){
for(att in 0:de_att){
hit <- pmax(pmin(att - def, hit_max), 0)
prob_dom[hit + 1] <- prob_dom[hit + 1] + dbinom(att, de_att, prob_att) * dbinom(def, de_def, prob_def)
}
}
if(n_att == 1){
for(i in 1:length(prob_dom)){
prob_dom_tot[i] <- prob_dom[i]
}
}
if(n_att == 2){
for(i in 0:hit_max){
for(j in 0:hit_max){
prob_dom_tot[pmin(i + j + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1]
}
}
}
if(n_att == 3){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1]
}
}
}
}
if(n_att == 4){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
for(z in 0:hit_max){
prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1] * prob_dom[z + 1]
}
}
}
}
}
return(prob_dom_tot)
}
Dommage(4, 5, 3, 4)
Dommage(3, 5, 3, 4)
prob_att <- 3/6
prob_def <- 2/6
Dommage <- function(n_att, de_att, de_def, vie_def){
hit_max <- vie_def
prob_dom_tot <- numeric(hit_max + 1)
prob_dom <- numeric(hit_max + 1)
for(def in 0:de_def){
for(att in 0:de_att){
hit <- pmax(pmin(att - def, hit_max), 0)
prob_dom[hit + 1] <- prob_dom[hit + 1] + dbinom(att, de_att, prob_att) * dbinom(def, de_def, prob_def)
}
}
if(n_att == 1){
for(i in 1:length(prob_dom)){
prob_dom_tot[i] <- prob_dom[i]
}
}
if(n_att == 2){
for(i in 0:hit_max){
for(j in 0:hit_max){
prob_dom_tot[pmin(i + j + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1]
}
}
}
if(n_att == 3){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1]
}
}
}
}
if(n_att == 4){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
for(z in 0:hit_max){
prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1] * prob_dom[z + 1]
}
}
}
}
}
return(prob_dom_tot)
}
Dommage(3, 5, 3, 4)
prob_att <- 3/6
prob_def <- 2/6
options("digits" = 4, "scipen" = 0)
Dommage <- function(n_att, de_att, de_def, vie_def){
hit_max <- vie_def
prob_dom_tot <- numeric(hit_max + 1)
prob_dom <- numeric(hit_max + 1)
for(def in 0:de_def){
for(att in 0:de_att){
hit <- pmax(pmin(att - def, hit_max), 0)
prob_dom[hit + 1] <- prob_dom[hit + 1] + dbinom(att, de_att, prob_att) * dbinom(def, de_def, prob_def)
}
}
if(n_att == 1){
for(i in 1:length(prob_dom)){
prob_dom_tot[i] <- prob_dom[i]
}
}
if(n_att == 2){
for(i in 0:hit_max){
for(j in 0:hit_max){
prob_dom_tot[pmin(i + j + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1]
}
}
}
if(n_att == 3){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1]
}
}
}
}
if(n_att == 4){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
for(z in 0:hit_max){
prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1] * prob_dom[z + 1]
}
}
}
}
}
return(prob_dom_tot)
}
Dommage(3, 5, 3, 4)
runApp('Heroscape_appli')
library(shiny)
library(shinyWidgets)
source("heroscape_fonction_dom.R")
ui <- fluidPage(
titlePanel("Distribution des dommages"),
sidebarLayout(
sidebarPanel(
radioButtons("nb_attaque", "Nombre d'attaque",
choices = c("1" = 1, "2" = 2, "3" = 3, "4" = 4)),
numericInput("nb_de_att", "nombre de des de l'attaquant", value = 1, min = 1, max = 15, step = 1),
numericInput("nb_de_def", "nombre de des du defenseur", value = 1, min = 1, max = 15, step = 1),
numericInput("nb_vie_def", "nombre de vie du defenseur", value = 1, min = 1, max = 10, step = 1),
checkboxInput("counter_attack", "Contre-attaque", value = FALSE)
),
mainPanel(
textOutput("Dommage")
)
)
)
server <- function(input, output) {
output$Dommage <- reactive({
ele <- Dommage(input$nb_attaque, input$nb_de_att, input$nb_de_def, input$nb_vie_def)
vec <- numeric(length(ele))
for(i in 1:length(ele)){
vec[i] <- paste("probabilite de faire", (i - 1), "dommages est de :", toString(ele[i]), sep = " ")
}
return(vec)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyWidgets)
source("heroscape_fonction_dom.R")
options("digits" = 4, "scipen" = 0)
runApp('Heroscape_appli')
library(shiny)
library(shinyWidgets)
options("digits" = 4, "scipen" = 0)
ui <- fluidPage(
titlePanel("Distribution des dommages"),
sidebarLayout(
sidebarPanel(
radioButtons("nb_attaque", "Nombre d'attaque",
choices = c("1" = 1, "2" = 2, "3" = 3, "4" = 4)),
numericInput("nb_de_att", "nombre de des de l'attaquant", value = 1, min = 1, max = 15, step = 1),
numericInput("nb_de_def", "nombre de des du defenseur", value = 1, min = 1, max = 15, step = 1),
numericInput("nb_vie_def", "nombre de vie du defenseur", value = 1, min = 1, max = 10, step = 1),
checkboxInput("counter_attack", "Contre-attaque", value = FALSE)
),
mainPanel(
textOutput("Dommage")
)
)
)
server <- function(input, output) {
output$Dommage <- reactive({
ele <- Dommage(input$nb_attaque, input$nb_de_att, input$nb_de_def, input$nb_vie_def)
vec <- numeric(length(ele))
for(i in 1:length(ele)){
vec[i] <- paste("probabilite de faire", (i - 1), "dommages est de :", toString(ele[i]), sep = " ")
}
return(vec)
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('Heroscape_appli')
runApp('Heroscape_appli')
runApp('Heroscape_appli')
runApp('Heroscape_appli')
setwd("~/Heroscape_appli")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
Dommage(3, 5, 3, 4)
library(shiny)
library(shinyWidgets)
options("digits" = 4, "scipen" = 0)
ui <- fluidPage(
titlePanel("Distribution des dommages"),
sidebarLayout(
sidebarPanel(
radioButtons("nb_attaque", "Nombre d'attaque",
choices = c("1" = 1, "2" = 2, "3" = 3, "4" = 4)),
numericInput("nb_de_att", "nombre de des de l'attaquant", value = 1, min = 1, max = 15, step = 1),
numericInput("nb_de_def", "nombre de des du defenseur", value = 1, min = 1, max = 15, step = 1),
numericInput("nb_vie_def", "nombre de vie du defenseur", value = 1, min = 1, max = 10, step = 1),
checkboxInput("counter_attack", "Contre-attaque", value = FALSE)
),
mainPanel(
textOutput("Dommage")
)
)
)
server <- function(input, output) {
output$Dommage <- reactive({
ele <- Dommage(input$nb_attaque, input$nb_de_att, input$nb_de_def, input$nb_vie_def)
vec <- numeric(length(ele))
for(i in 1:length(ele)){
vec[i] <- paste("probabilite de faire", (i - 1), "dommages est de :", toString(ele[i]), sep = " ")
}
return(vec)
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
prob_att <- 3/6
prob_def <- 2/6
Dommage <- function(n_att, de_att, de_def, vie_def){
hit_max <- vie_def
prob_dom_tot <- numeric(hit_max + 1)
prob_dom <- numeric(hit_max + 1)
for(def in 0:de_def){
for(att in 0:de_att){
hit <- pmax(pmin(att - def, hit_max), 0)
prob_dom[hit + 1] <- prob_dom[hit + 1] + dbinom(att, de_att, prob_att) * dbinom(def, de_def, prob_def)
}
}
if(n_att == 1){
for(i in 1:length(prob_dom)){
prob_dom_tot[i] <- prob_dom[i]
}
}
if(n_att == 2){
for(i in 0:hit_max){
for(j in 0:hit_max){
prob_dom_tot[pmin(i + j + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1]
}
}
}
if(n_att == 3){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1]
}
}
}
}
if(n_att == 4){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
for(z in 0:hit_max){
prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1] * prob_dom[z + 1]
}
}
}
}
}
return(prob_dom_tot)
}
Dommage(3, 5, 3, 4)
prob_att <- 3/6
prob_def <- 2/6
Dommage <- function(n_att, de_att, de_def, vie_def){
hit_max <- vie_def
prob_dom_tot <- numeric(hit_max + 1)
prob_dom <- numeric(hit_max + 1)
for(def in 0:de_def){
for(att in 0:de_att){
hit <- pmax(pmin(att - def, hit_max), 0)
prob_dom[hit + 1] <- prob_dom[hit + 1] + dbinom(att, de_att, prob_att) * dbinom(def, de_def, prob_def)
}
}
if(n_att == 1){
for(i in 1:length(prob_dom)){
prob_dom_tot[i] <- prob_dom[i]
}
}
if(n_att == 2){
for(i in 0:hit_max){
for(j in 0:hit_max){
prob_dom_tot[pmin(i + j + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1]
}
}
}
if(n_att == 3){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1]
}
}
}
}
if(n_att == 4){
for(i in 0:hit_max){
for(j in 0:hit_max){
for(k in 0:hit_max){
for(z in 0:hit_max){
prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] <- prob_dom_tot[pmin(i + j + k + z + 1, hit_max + 1)] + prob_dom[i + 1] * prob_dom[j + 1] * prob_dom[k + 1] * prob_dom[z + 1]
}
}
}
}
}
return(prob_dom_tot)
}
Dommage(3, 5, 3, 4)
Dommage(4, 5, 3, 4)
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
titlePanel("Distribution des dommages"),
sidebarLayout(
sidebarPanel(
radioButtons("nb_attaque", "Nombre d'attaque",
choices = c("1" = 1, "2" = 2, "3" = 3, "4" = 4)),
numericInput("nb_de_att", "nombre de des de l'attaquant", value = 1, min = 1, max = 15, step = 1),
numericInput("nb_de_def", "nombre de des du defenseur", value = 1, min = 1, max = 15, step = 1),
numericInput("nb_vie_def", "nombre de vie du defenseur", value = 1, min = 1, max = 10, step = 1),
checkboxInput("counter_attack", "Contre-attaque", value = FALSE)
),
mainPanel(
verbatimTextOutput("Dommage")
)
)
)
server <- function(input, output) {
output$Dommage <- reactive({
ele <- Dommage(input$nb_attaque, input$nb_de_att, input$nb_de_def, input$nb_vie_def)
vec <- ''
for(i in 1:length(ele)){
vec <- paste(paste("probabilite de faire", (i - 1), "dommages est de :", toString(format(ele[i], digits = 6)), sep = ' '), vec, sep = '\n')
}
return(vec)
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
